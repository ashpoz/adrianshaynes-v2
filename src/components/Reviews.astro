---
const letterboxRssFeed = `${Astro.url.origin}/api/letterbox`
const response = await fetch(letterboxRssFeed)
const data = await response.json()
const rssItems = data.rss.channel[0].item

const formatDate = (date: Date) => {
	const options: Object = {
		weekday: 'short',
		year: 'numeric',
		month: 'short',
		day: 'numeric',
	}
	return new Date(date).toLocaleDateString('en-US', options)
}

const removeSpoilerReview = (str: String) => {
	if (str.toString().includes('spoilers')) {
		let arr: any = str.toString().match(/<p>(.*?)<\/p>/gm)
		// 1st <p> is movie poster, 2nd <p> is spoiler note
		arr = arr.slice(0, 2)
		arr = arr.join('')
		return arr.toString().match(/<p>([^<]+)<\/p>\s*$/)?.[1]
	} else {
		return str.toString().match(/<p>([^<]+)<\/p>\s*$/)?.[1]
	}
}

const extractImgSrc = (str: String) => {
	return str.toString().match(/src="([^"]*)"/)?.[1]
}

const extractDescription = (str: String) => {
	return str.toString().match(/<p>(?!.*<img).*?<\/p>/s)?.[0]
}

const generateStars = (rating: String) => {
    const numericRating = Number(rating);
    if (typeof numericRating === 'number' && numericRating >= 0) {
        return Array.from({ length: Math.floor(numericRating) }, () => '‚≠êÔ∏è');
    }
    return ''; // Handle invalid rating
};

console.log(letterboxRssFeed)
---

<ul class="reviews">
	{
		rssItems
			.filter((item: any) => {
				return !item.description.toString().includes('Watched on')
			})
			.map((item: any, index: number) => {
				return (
					index < 10 && (
						<li class="link-card review">
							<a class="review__link" href={item.link}>
								<h3>
									{item['letterboxd:filmTitle']} <span>üîó</span>
								</h3>
								<div>
									<div class="review__stars">
										{generateStars(item['letterboxd:memberRating'])}
									</div>
									<div class="review__date">
										Added {formatDate(item.pubDate)}
									</div>
								</div>
								<div class="review__description">
									<img
										src={extractImgSrc(item.description)}
										alt={`${item['letterboxd:filmTitle']} movie poster`}
									/>
									<p set:html={extractDescription(item.description)} />
								</div>
							</a>
						</li>
					)
				)
			})
	}
</ul>

<style is:global>
	.review {
		background-color: white;
		box-shadow:
			0 4px 6px -1px rgba(0, 0, 0, 0.1),
			0 2px 4px -2px rgba(0, 0, 0, 0.1);
		display: flex;
		flex: 1;
		list-style: none;
		min-width: 15rem;
		padding: 0.15rem;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}

	.review > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem 1.3rem;
		border-radius: 0.35rem;
		color: #111;
		background-color: white;
		opacity: 0.8;
	}
	.review h3 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	.review p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #2a2a2a;
		font-size: clamp(16px, 1.25vw + 0.5rem, 1rem);
		line-height: 1.5;
	}
	.review:is(:hover, :focus-within) {
		background-position: 0;
	}
	.review:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
	.reviews {
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		padding: 0;
	}
	.review img {
		width: 100%;
	}
	.review__date {
		font-size: 0.9rem;
		font-weight: 600;
		opacity: 0.8;
	}
	@media (max-width: 1100px) {
		.reviews {
			justify-content: center;
		}
	}
</style>
